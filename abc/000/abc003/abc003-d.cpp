#include<cstdio>
using namespace std;
#define mod 1000000007
typedef long long ll;

ll kai[100001],inv[100001];

ll gyaku(ll x){
    ll two[30],res=1,y;
    two[0]=1;
    res=x;
    y=x;
    for(int i=1;i<30;i++){
        two[i]=2*two[i-1];
        y=y*y;
        y%=mod;
        if(two[i]&(mod-2)){
            res*=y;
            res%=mod;
        }
    }
    return res;
}

void kaiinit(){
    kai[0]=1;
    for(int i=1;i<=100000;i++){
        kai[i]=kai[i-1]*i;
        kai[i]%=mod;
    }
    inv[100000]=gyaku(kai[100000]);
    for(int i=99999;i>=0;i--){
        inv[i]=inv[i+1]*(i+1);
        inv[i]%=mod;
    }
}

int main(){
    ll r,c,x,y,d,l,ans=1LL,z;
    scanf("%lld %lld",&r,&c);
    scanf("%lld %lld",&x,&y);
    scanf("%lld %lld",&d,&l);
    kaiinit();
    ans*=kai[x*y];
    ans%=mod;
    ans*=inv[x*y-d];
    ans%=mod;
    ans*=inv[d];
    ans%=mod;
    ans*=kai[x*y-d];
    ans%=mod;
    ans*=inv[x*y-d-l];
    ans%=mod;
    ans*=inv[l];
    ans%=mod;
    if((x-1)*y>=d+l){
        z=kai[(x-1)*y];
        z%=mod;
        z*=inv[(x-1)*y-d];
        z%=mod;
        z*=inv[d];
        z%=mod;
        z*=kai[(x-1)*y-d];
        z%=mod;
        z*=inv[(x-1)*y-d-l];
        z%=mod;
        z*=inv[l];
        z%=mod;
        ans-=z;
        if(ans<0){
            ans+=mod;
        }
        ans-=z;
        if(ans<0){
            ans+=mod;
        }
        ans%=mod;
    }
    if(x*(y-1)>=d+l){
        z=kai[x*(y-1)];
        z%=mod;
        z*=inv[(x)*(y-1)-d];
        z%=mod;
        z*=inv[d];
        z%=mod;
        z*=kai[(x)*(y-1)-d];
        z%=mod;
        z*=inv[(x)*(y-1)-d-l];
        z%=mod;
        z*=inv[l];
        z%=mod;
        ans-=z;
        if(ans<0){
            ans+=mod;
        }
        ans-=z;
        if(ans<0){
            ans+=mod;
        }
        ans%=mod;
    }
    if((x-1)*(y-1)>=d+l){
        z=kai[(x-1)*(y-1)];
        z%=mod;
        z*=inv[(x-1)*(y-1)-d];
        z%=mod;
        z*=inv[d];
        z%=mod;
        z*=kai[(x-1)*(y-1)-d];
        z%=mod;
        z*=inv[(x-1)*(y-1)-d-l];
        z%=mod;
        z*=inv[l];
        z%=mod;
        ans+=z;
        if(ans<0){
            ans+=mod;
        }
        ans+=z;
        if(ans<0){
            ans+=mod;
        }
        ans+=z;
        if(ans<0){
            ans+=mod;
        }
        ans+=z;
        if(ans<0){
            ans+=mod;
        }
        ans%=mod;
    }
    if((x-2)*y>=d+l){
        z=kai[(x-2)*y];
        z%=mod;
        z*=inv[(x-2)*y-d];
        z%=mod;
        z*=inv[d];
        z%=mod;
        z*=kai[(x-2)*y-d];
        z%=mod;
        z*=inv[(x-2)*y-d-l];
        z%=mod;
        z*=inv[l];
        z%=mod;
        ans+=z;
        if(ans<0){
            ans+=mod;
        }
        ans%=mod;
    }
    if(x*(y-2)>=d+l){
        z=kai[x*(y-2)];
        z%=mod;
        z*=inv[(x)*(y-2)-d];
        z%=mod;
        z*=inv[d];
        z%=mod;
        z*=kai[(x)*(y-2)-d];
        z%=mod;
        z*=inv[(x)*(y-2)-d-l];
        z%=mod;
        z*=inv[l];
        z%=mod;
        ans+=z;
        if(ans<0){
            ans+=mod;
        }
        ans%=mod;
    }
    if((x-2)*(y-1)>=d+l){
        z=kai[(x-2)*(y-1)];
        z%=mod;
        z*=inv[(x-2)*(y-1)-d];
        z%=mod;
        z*=inv[d];
        z%=mod;
        z*=kai[(x-2)*(y-1)-d];
        z%=mod;
        z*=inv[(x-2)*(y-1)-d-l];
        z%=mod;
        z*=inv[l];
        z%=mod;
        ans-=z;
        if(ans<0){
            ans+=mod;
        }
        ans-=z;
        if(ans<0){
            ans+=mod;
        }
        ans%=mod;
    }
    if((x-1)*(y-2)>=d+l){
        z=kai[(x-1)*(y-2)];
        z%=mod;
        z*=inv[(x-1)*(y-2)-d];
        z%=mod;
        z*=inv[d];
        z%=mod;
        z*=kai[(x-1)*(y-2)-d];
        z%=mod;
        z*=inv[(x-1)*(y-2)-d-l];
        z%=mod;
        z*=inv[l];
        z%=mod;
        ans-=z;
        if(ans<0){
            ans+=mod;
        }
        ans-=z;
        if(ans<0){
            ans+=mod;
        }
        ans%=mod;
    }
    if((x-2)*(y-2)>=d+l&&x-2>0&&y-2>0){
        z=kai[(x-2)*(y-2)];
        z%=mod;
        z*=inv[(x-2)*(y-2)-d];
        z%=mod;
        z*=inv[d];
        z%=mod;
        z*=kai[(x-2)*(y-2)-d];
        z%=mod;
        z*=inv[(x-2)*(y-2)-d-l];
        z%=mod;
        z*=inv[l];
        z%=mod;
        ans+=z;
        if(ans<0){
            ans+=mod;
        }
        ans%=mod;
    }
    if(ans<0){
        ans+=mod*20LL;
        ans%=mod;
    }
    ans*=(r-x+1)*(c-y+1);
    ans%=mod;
    printf("%lld\n",ans);
}